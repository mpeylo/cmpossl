=pod

=head1 NAME

OSSL_CMP_cmp_timeframe,
OSSL_CMP_validate_msg,
OSSL_CMP_validate_cert_path,
OSSL_CMP_print_cert_verify_cb,
OSSL_CMP_certConf_cb
- functions for verifying CMP message protection

=head1 SYNOPSIS

 #include <openssl/cmp.h>
 int OSSL_CMP_cmp_timeframe(const ASN1_TIME *start, const ASN1_TIME *end,
                            X509_VERIFY_PARAM *vpm);
 int OSSL_CMP_validate_msg(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
 int OSSL_CMP_validate_cert_path(const OSSL_CMP_CTX *ctx,
                                 X509_STORE *trusted_store,
                                 X509 *cert, int defer_errors);
 int OSSL_CMP_print_cert_verify_cb(int ok, X509_STORE_CTX *ctx);
 int OSSL_CMP_certConf_cb(OSSL_CMP_CTX *ctx, X509 *cert, int fail_info,
                          const char **text);

=head1 DESCRIPTION

This is the API for validating the protection of CMP messages,
which includes validating CMP server certificates and their paths
while optionally checking the revocation status of the certificates(s).

OSSL_CMP_cmp_timeframe() compares the given time period with the current time.
If verification parameters are given and X509_V_FLAG_USE_CHECK_TIME is set
the reference time included there is used instead of the current time.

OSSL_CMP_validate_msg() validates the protection of the given PKIMessage
using either password-based mac (PBM) or a signature algorithm.

In case of signature algorithm, the certificate to use for protection
validation is taken from ctx->srvCert if set. Otherwise potentially suitable
sender certificates are determined by matching the PKIMessage's sender DN and
senderKID to the certificates available in the PKIMessage's extraCerts,
ctx->untrusted_certs, and ctx->trusted_store.  The first candidate that can be
validated against ctx->trusted_store, utilizing ctx->untrusted_certs and
extraCerts, is used.

In case of successful validation of PBM protection of a certificate response,
the certificates in the caPubs field (if any) are added to ctx->trusted_store,
to be available for validating future messages in the same context.
Those could e.g. apply to later Polling Responses (pollRep) or PKI Confirmation
(PKIConf) messages in the same transaction.

If ctx->permitTAInExtraCertsForIR is true, a self-signed certificate from the
PKIMessage's extraCerts field may also be used as trust anchor during
protection validation if it can be used to validate the issued certificate
returned in IP.  This is according to 3GPP TS 33.310.

OSSL_CMP_validate_cert_path() attempts to validate the given certificate and its
path using the given store of trusted certs (possibly including CRLs and a cert
verification callback) and non-trusted intermediate certs from the B<ctx>.
The B<defer_errors> parameter needs to be set when used in a certConf callback
because any following certConf exchange will likely clear the OpenSSL error
queue.

OSSL_CMP_print_cert_verify_cb() is a diagnostic function that may be registered
using X509_STORE_set_verify_cb(), such that it gets called by OpenSSL's
verify_cert() function at the end of a cert verification as an opportunity
to gather and output information regarding a (failing) cert verification,
and to possibly change the result of the verification (not done here).
It returns 0 if and only if the cert verification is considered failed.

OSSL_CMP_certConf_cb() is a basic certificate confirmation callback validating
that the new certificate can be verified with the trusted/untrusted certificates
in B<ctx>. As there is no requirement in RFC 4210 that the certificate can be
validated by the client, this callback is not set by default in the context.

=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

=head1 RETURN VALUES

OSSL_CMP_cmp_timeframe() returns 0 if X509_V_FLAG_NO_CHECK_TIME is set in the
given verification parameters or the reference time is within the given bounds,
1 if it is past the end time, and -1 if it is before the start time.

OSSL_CMP_validate_msg() returns 1 on success, 0 on error or validation failed.

OSSL_CMP_validate_cert_path() returns 1 on successful validation and 0
otherwise.

OSSL_CMP_certConf_cb() returns B<fail_info> if it is !=0, 0 on successful
validation, or else a bit field with the OSSL_CMP_PKIFAILUREINFO_incorrectData
bit set.

=head1 SEE ALSO

L<OSSL_CMP_CTX_new(3)>, L<OSSL_CMP_exec_IR_ses(3)>

=head1 COPYRIGHT

Copyright 2007-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
