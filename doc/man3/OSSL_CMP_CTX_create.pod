=pod

=head1 NAME

OSSL_CMP_CTX_create,
OSSL_CMP_CTX_init,
OSSL_CMP_CTX_delete,
OSSL_CMP_CTX_set1_referenceValue,
OSSL_CMP_CTX_set1_secretValue,
OSSL_CMP_CTX_set1_srvCert,
OSSL_CMP_CTX_set1_clCert,
OSSL_CMP_CTX_set1_oldClCert,
OSSL_CMP_CTX_set1_p10CSR,
OSSL_CMP_CTX_set1_subjectName,
OSSL_CMP_CTX_set1_issuer,
OSSL_CMP_CTX_set1_newClCert,
OSSL_CMP_CTX_get0_newClCert,
OSSL_CMP_CTX_set0_pkey,
OSSL_CMP_CTX_set0_newPkey,
OSSL_CMP_CTX_set1_pkey,
OSSL_CMP_CTX_set1_newPkey,
OSSL_CMP_CTX_set1_transactionID,
OSSL_CMP_CTX_set1_recipNonce,
OSSL_CMP_CTX_set1_last_senderNonce,
OSSL_CMP_CTX_set_option,
OSSL_CMP_CTX_caPubs_get1,
OSSL_CMP_CTX_set1_caPubs,
OSSL_CMP_CTX_policyOID_push1,
OSSL_CMP_CTX_geninfo_itav_push0,
OSSL_CMP_CTX_genm_itav_push0,
OSSL_CMP_CTX_set1_extraCertsOut,
OSSL_CMP_CTX_extraCertsOut_push1,
OSSL_CMP_CTX_extraCertsIn_get1,
OSSL_CMP_CTX_set1_extraCertsIn,
OSSL_CMP_CTX_set0_trustedStore,
OSSL_CMP_CTX_get0_trustedStore,
OSSL_CMP_CTX_set1_untrusted_certs,
OSSL_CMP_CTX_get0_untrusted_certs,
OSSL_CMP_CTX_set_log_cb,
OSSL_CMP_puts,
OSSL_CMP_printf,
OSSL_CMP_print_errors,
OSSL_CMP_CTX_status_get,
OSSL_CMP_CTX_statusString_get,
OSSL_CMP_CTX_failInfoCode_get,
OSSL_CMP_CTX_set_failInfoCode,
OSSL_CMP_CTX_set1_proxyName,
OSSL_CMP_CTX_set_proxyPort,
OSSL_CMP_CTX_set_transfer_cb,
OSSL_CMP_CTX_set_transfer_cb_arg,
OSSL_CMP_CTX_get_transfer_cb_arg,
OSSL_CMP_CTX_set_http_cb,
OSSL_CMP_CTX_set_http_cb_arg,
OSSL_CMP_CTX_get_http_cb_arg,
OSSL_CMP_CTX_set1_recipient,
OSSL_CMP_CTX_set1_expected_sender,
OSSL_CMP_CTX_set1_serverName,
OSSL_CMP_CTX_set1_serverPath,
OSSL_CMP_CTX_set_serverPort,
OSSL_CMP_CTX_set0_reqExtensions,
OSSL_CMP_CTX_set1_reqExtensions,
OSSL_CMP_CTX_reqExtensions_have_SAN,
OSSL_CMP_CTX_set_certConf_cb,
OSSL_CMP_CTX_set_certConf_cb_arg,
OSSL_CMP_CTX_get_certConf_cb_arg,
OSSL_CMP_CTX_subjectAltName_push1
- functions for managing the CMP client context datastructure

=head1 SYNOPSIS

 #include <openssl/cmp.h>

 OSSL_CMP_CTX *OSSL_CMP_CTX_create();
 int OSSL_CMP_CTX_init(OSSL_CMP_CTX *ctx);
 void OSSL_CMP_CTX_delete(OSSL_CMP_CTX *ctx);

 int OSSL_CMP_CTX_set1_referenceValue(OSSL_CMP_CTX *ctx,
                                      const unsigned char *ref, size_t len);
 int OSSL_CMP_CTX_set1_secretValue(OSSL_CMP_CTX *ctx, const unsigned char *sec,
                                   const size_t len);
 int OSSL_CMP_CTX_set1_srvCert(OSSL_CMP_CTX *ctx, const X509 *cert);
 int OSSL_CMP_CTX_set1_clCert(OSSL_CMP_CTX *ctx, const X509 *cert);
 int OSSL_CMP_CTX_set1_oldClCert(OSSL_CMP_CTX *ctx, const X509 *cert);
 int OSSL_CMP_CTX_set1_p10CSR(OSSL_CMP_CTX *ctx, const X509_REQ *csr);
 int OSSL_CMP_CTX_set1_subjectName(OSSL_CMP_CTX *ctx, const X509_NAME *name);
 int OSSL_CMP_CTX_set1_issuer(OSSL_CMP_CTX *ctx, const X509_NAME *name);
 int OSSL_CMP_CTX_set1_newClCert(OSSL_CMP_CTX *ctx, const X509 *cert);
 X509 *OSSL_CMP_CTX_get0_newClCert(const OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set0_pkey(OSSL_CMP_CTX *ctx, const EVP_PKEY *pkey);
 int OSSL_CMP_CTX_set0_newPkey(OSSL_CMP_CTX *ctx, const EVP_PKEY *pkey);
 int OSSL_CMP_CTX_set1_pkey(OSSL_CMP_CTX *ctx, const EVP_PKEY *pkey);
 int OSSL_CMP_CTX_set1_newPkey(OSSL_CMP_CTX *ctx, const EVP_PKEY *pkey);
 int OSSL_CMP_CTX_set1_transactionID(OSSL_CMP_CTX *ctx,
                                     const ASN1_OCTET_STRING *id);
 int OSSL_CMP_CTX_set1_recipNonce(OSSL_CMP_CTX *ctx,
                                  const ASN1_OCTET_STRING *nonce);
 int OSSL_CMP_CTX_set1_last_senderNonce(OSSL_CMP_CTX *ctx,
                                        const ASN1_OCTET_STRING *nonce);
 int OSSL_CMP_CTX_set1_serverName(OSSL_CMP_CTX *ctx, const char *name);
 int OSSL_CMP_CTX_set_serverPort(OSSL_CMP_CTX *ctx, int port);
 STACK_OF(X509) *OSSL_CMP_CTX_caPubs_get1(const OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set1_caPubs(OSSL_CMP_CTX *ctx, STACK_OF(X509) *caPubs);
 int OSSL_CMP_CTX_policyOID_push1(OSSL_CMP_CTX *ctx, const char *policyOID);
 int OSSL_CMP_CTX_geninfo_itav_push0(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);
 int OSSL_CMP_CTX_genm_itav_push0(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);

 int OSSL_CMP_CTX_set1_extraCertsOut(OSSL_CMP_CTX *ctx,
                                     STACK_OF(X509) *extraCertsOut);
 int OSSL_CMP_CTX_extraCertsOut_push1(OSSL_CMP_CTX *ctx, const X509 *val);
 STACK_OF(X509) *OSSL_CMP_CTX_extraCertsIn_get1(const OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set1_extraCertsIn(OSSL_CMP_CTX *ctx,
                                    STACK_OF(X509) *extraCertsIn);

 int OSSL_CMP_CTX_set0_trustedStore(OSSL_CMP_CTX *ctx, X509_STORE *store);
 X509_STORE *OSSL_CMP_CTX_get0_trustedStore(const OSSL_CMP_CTX *ctx);

 int OSSL_CMP_CTX_set1_untrusted_certs(OSSL_CMP_CTX *ctx,
                                       const STACK_OF(X509) *store);
 STACK_OF(X509) *OSSL_CMP_CTX_get0_untrusted_certs(const OSSL_CMP_CTX *ctx);

 typedef enum {OSSL_LOG_EMERG, OSSL_LOG_ALERT, OSSL_LOG_CRIT, OSSL_LOG_ERR,
               OSSL_LOG_WARNING, OSSL_LOG_NOTICE, OSSL_LOG_INFO, OSSL_LOG_DEBUG}
     OSSL_CMP_severity;

 int OSSL_CMP_CTX_set_log_cb(OSSL_CMP_CTX *ctx, OSSL_cmp_log_cb_t cb);

 int OSSL_CMP_puts(const char *component, const char *file, int lineno,
                   OSSL_CMP_severity level, const char *msg);

 int OSSL_CMP_printf(const OSSL_CMP_CTX *ctx,
                     const char *func, const char *file, int lineno,
                     OSSL_CMP_severity level, const char *fmt, ...);

 void OSSL_CMP_print_errors(OSSL_CMP_CTX *ctx);

 int OSSL_CMP_CTX_set_option(OSSL_CMP_CTX *ctx, int opt, int val);

 int OSSL_CMP_CTX_status_get(OSSL_CMP_CTX *ctx);
 OSSL_CMP_PKIFREETEXT *OSSL_CMP_CTX_statusString_get(OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_failInfoCode_get(OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set_failInfoCode(OSSL_CMP_CTX *ctx,
                                   OSSL_CMP_PKIFAILUREINFO *failInfo);
 int OSSL_CMP_CTX_set1_proxyName(OSSL_CMP_CTX *ctx, const char *name);
 int OSSL_CMP_CTX_set_proxyPort(OSSL_CMP_CTX *ctx, int port);
 int OSSL_CMP_CTX_set_transfer_cb(OSSL_CMP_CTX *ctx, OSSL_cmp_transfer_cb_t cb);
 int OSSL_CMP_CTX_set_transfer_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
 void *OSSL_CMP_CTX_get_transfer_cb_arg(OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set_http_cb(OSSL_CMP_CTX *ctx, OSSL_cmp_http_cb_t cb);
 int OSSL_CMP_CTX_set_http_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
 void *OSSL_CMP_CTX_get_http_cb_arg(OSSL_CMP_CTX *ctx);
 int OSSL_CMP_CTX_set1_recipient(OSSL_CMP_CTX *ctx, const X509_NAME *name);
 int OSSL_CMP_CTX_set1_expected_sender(OSSL_CMP_CTX *ctx,
                                       const X509_NAME *name);
 int OSSL_CMP_CTX_set1_serverPath(OSSL_CMP_CTX *ctx, const char *path);
 int OSSL_CMP_CTX_set0_reqExtensions(OSSL_CMP_CTX *ctx, X509_EXTENSIONS *exts);
 int OSSL_CMP_CTX_set1_reqExtensions(OSSL_CMP_CTX *ctx, X509_EXTENSIONS *exts);
 int OSSL_CMP_CTX_reqExtensions_have_SAN(OSSL_CMP_CTX *ctx);

 int OSSL_CMP_CTX_set_certConf_cb(OSSL_CMP_CTX *ctx, OSSL_cmp_certConf_cb_t cb);
 int OSSL_CMP_certConf_cb(OSSL_CMP_CTX *ctx, const X509 *cert, int fail_info,
                          const char **text);
 int OSSL_CMP_CTX_set_certConf_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
 void *OSSL_CMP_CTX_get_certConf_cb_arg(OSSL_CMP_CTX *ctx);

 int OSSL_CMP_CTX_subjectAltName_push1(OSSL_CMP_CTX *ctx,
                                       const GENERAL_NAME *name);

=head1 DESCRIPTION

This is the context API for using CMP (Certificate Management Protocol) with
OpenSSL.

OSSL_CMP_CTX_create() allocates and initialized an OSSL_CMP_CTX structure.

OSSL_CMP_CTX_init() initializes the context to default values.
Transfer is set to HTTP, proof-of-possession method to POPOSigningKey

OSSL_CMP_CTX_delete() frees any allocated non-ASN1 fields of OSSL_CMP_CTX and
calls the ASN1 defined OSSL_CMP_CTX_free() function to free the rest.

OSSL_CMP_CTX_set1_referenceValue() sets the given referenceValue in the given
B<ctx> or clears it if the B<ref> argument is NULL.

OSSL_CMP_CTX_set1_secretValue() sets the B<sec> with the length B<len> in the
given B<ctx> or clears it if the B<sec> argument is NULL.

OSSL_CMP_CTX_set1_srvCert() pins the server certificate to be directly trusted
(even if it is expired) for verifying response messages.
The cert pointer is not consumed. It may be NULL to clear the entry.

OSSL_CMP_CTX_set1_clCert() sets the given client certificate in the given
OSSL_CMP_CTX structure. The client certificate will then be used by the
functions to set the "sender" field for outgoing messages and it will be
included in the extraCerts field.

OSSL_CMP_CTX_set1_oldClCert() sets the old certificate to be updated in KUR or
to be revoked in RR. It must be given for RR, else it defaults to B<clCert>.
The reference certificate determined in this way, if any, is also used for
deriving default subject DN and Subject Alternative Names for IR, CR, and KUR.
Its issuer, if any, is used as default recipient in the CMP message header.

OSSL_CMP_CTX_set1_p10CSR() sets the PKCS#10 CSR to be used in P10CR.

OSSL_CMP_CTX_set1_subjectName() sets the subject DN that will be used in
the CertTemplate structure when requesting a new cert. For KUR, it defaults to
the subject DN of the reference certificate, see OSSL_CMP_CTX_set1_oldClCert().
This default is used for IR and CR only if no SANs are set.

If clCert is not set (e.g. in case of IR with MSG_MAC_ALG), the subject DN
is also used as sender of the PKI message.

OSSL_CMP_CTX_set1_issuer() sets the name of the intended issuer that
will be set in the CertTemplate, i.e., the X509 name of the CA server.

OSSL_CMP_CTX_set1_newClCert() sets the given (newly enrolle) client certificate
in the given OSSL_CMP_CTX structure.

OSSL_CMP_CTX_get0_newClCert() returns a pointer to the last enrolled
certificate.

OSSL_CMP_CTX_set0_pkey() sets the given EVP_PKEY structure, holding the
private and public keys, corresponding to the client certificate set with
B<OSSL_CMP_CTX_set1_clCert()> in the given OSSL_CMP_CTX structure.
Used to create the protection in case of MSG_SIG_ALG.

OSSL_CMP_CTX_set1_pkey() is the same as OSSL_CMP_CTX_set0_pkey(),
except that it does not consume the pointer.

OSSL_CMP_CTX_set0_newPkey() sets the given EVP_PKEY structure, holding the
private and public keys, which shall be certified, in the given OSSL_CMP_CTX
structure

OSSL_CMP_CTX_set1_newPkey() is the same as OSSL_CMP_CTX_set0_newPkey(),
except that it does not consume the pointer.

OSSL_CMP_CTX_set1_transactionID() sets the given transaction ID in the given
OSSL_CMP_CTX structure.

OSSL_CMP_CTX_set1_recipNonce() sets the given recipient nonce in the given
OSSL_CMP_CTX structure.

OSSL_CMP_CTX_set1_last_senderNonce() stores the last sent sender B<nonce> in
the B<ctx>. This will be used to validate the recipNonce in incoming messages.

OSSL_CMP_CTX_set1_serverName() sets the given server Address (as IP or name)
in the given OSSL_CMP_CTX structure.

OSSL_CMP_CTX_set_serverPort() sets the port of the CMP server to connect to.
Port defaults to 8080 if not set explicitly.

OSSL_CMP_CTX_set_option() sets the given value for the given option
(e.g. OSSL_CMP_CTX_OPT_IMPLICITCONFIRM) in the given OSSL_CMP_CTX structure.

The following options can be set:
    OSSL_CMP_CTX_OPT_IMPLICITCONFIRM
        Request server to enable implicit confirm mode, where the client
        does not need to send confirmation upon receiving the
        certificate. If the server does not enable implicit confirmation
        in the return message, then confirmation is sent anyway.

    OSSL_CMP_CTX_OPT_DISABLECONFIRM
        Do not confirm enrolled certificates, to cope with broken servers
        not supporting implicit confirmation correctly.
B<WARNING:> This setting leads to unspecified behavior and it is meant
exclusively to allow interoperability with server implementations violating
RFC 4210.

    OSSL_CMP_CTX_OPT_UNPROTECTED_REQUESTS
        Send messages without CMP-level protection.

    OSSL_CMP_CTX_OPT_SUBJECTALTNAME_NODEFAULT
        Do not take default Subject Alternative Names
        from the reference certificate.

    OSSL_CMP_CTX_OPT_SUBJECTALTNAME_CRITICAL
        Demand that the given Subject Alternative Names are flagged as critical.

    OSSL_CMP_CTX_OPT_POLICIES_CRITICAL
        Demand that the given policies are flagged as critical.

    OSSL_CMP_CTX_OPT_VALIDITYDAYS
        Number of days new certificates are asked to be valid for.

    OSSL_CMP_CTX_OPT_POPOMETHOD
        Select the proof of possession method to use. Possible values are:
            OSSL_CRMF_POPO_NONE       - ProofOfPossession field omitted
            OSSL_CRMF_POPO_RAVERIFIED - assert that the RA has already
                                        verified the PoPo
            OSSL_CRMF_POPO_SIGNATURE  - sign a value with private key
            OSSL_CRMF_POPO_KEYENC     - decrypt the encrypted certificate
                                        ("indirect method")

    OSSL_CMP_CTX_OPT_DIGEST_ALGNID
        The digest algorithm NID to be used in RFC 4210's MSG_SIG_ALG,
        if applicable used for message protection and Proof-of-Possession.

    OSSL_CMP_CTX_OPT_IGNORE_KEYUSAGE
        Ignore key usage restrictions in signer certificate when
        validating signature-based protection in received CMP messages.
        Else, 'digitalSignature' must be allowed by CMP signer certificates.

    OSSL_CMP_CTX_OPT_UNPROTECTED_ERRORS
        Accept unprotected error responses which are either explicitly
        unprotected or where protection verification failed. Applies to regular
        error messages as well as certificate responses (IP/CP/KUP) and
        revocation responses (RP) with rejection.
B<WARNING:> This setting leads to unspecified behavior and it is meant
exclusively to allow interoperability with server implementations violating
RFC 4210.

    OSSL_CMP_CTX_OPT_MSGTIMEOUT
        Number of seconds (or 0 for infinite) a CMP message round trip is
        allowed to take before a timeout error is returned. Default is 120.

    OSSL_CMP_CTX_OPT_TOTALTIMEOUT
        Maximum total number of seconds an enrollment (including polling)
        may take. Default is 0 (infinite).

    OSSL_CMP_CTX_PERMIT_TA_IN_EXTRACERTS_FOR_IR
        Allow retrieving a trust anchor from extraCers and using that
        to validate the certificate chain of an IP message.

    OSSL_CMP_CTX_OPT_REVOCATION_REASON
        The reason code to be included in revocation request (RR);
        values: 0..10 (RFC 5210, 5.3.1) or -1 for none (which is the default)

OSSL_CMP_CTX_caPubs_get1() returns a pointer to a duplicate of the stack of
X.509 certificates received in the caPubs field of last received certificate
response message IP/CP/KUP which had caPubs set.

OSSL_CMP_CTX_set1_caPubs() copies the given caPubs stack to the context.

OSSL_CMP_CTX_policyOID_push1() adds the certificate policy OID given by the
string to the X509_EXTENSIONS of the requested certificate template.
Returns -1 on parse error.

OSSL_CMP_CTX_geninfo_itav_push0() adds B<itav> to the stack in the B<ctx> to be
added to the GeneralInfo field of the CMP PKIMessage header of a request
message sent with this context.  Consumes the pointer to B<itav>.

OSSL_CMP_CTX_genm_itav_push0() adds B<itav> to the stack in the B<ctx> which
will be the body of a General Message sent with this context.
Consumes the pointer to B<itav>.

OSSL_CMP_CTX_set1_extraCertsOut() sets the stack of extraCerts that will be
sent to remote.

OSSL_CMP_CTX_extraCertsOut_push1() adds the given certificate to the outbound
extraCerts stack, without consuming the pointer.

OSSL_CMP_CTX_extraCertsIn_get1() returns a pointer to a duplicate of the stack
of X.509 certificates received in the extraCerts field of last received
certificate response message IP/CP/KUP which had extraCerts set.
Returns an empty stack if no extraCerts have been received and NULL on error.

OSSL_CMP_CTX_set1_extraCertsIn() sets the stack of extraCerts that was
received from remote.

OSSL_CMP_CTX_set0_trustedStore() sets the X509_STORE type certificate store
containing trusted (root) CA certificates and possibly CRLs and a certificate
verification callback function used for CMP server authentication. Any already
existing store entry is freed. When given a NULL parameter the entry is cleared.

OSSL_CMP_CTX_get0_trustedStore() returns a pointer to the certificate store
containing trusted root CA certificates. NULL on error.

OSSL_CMP_CTX_set1_untrusted_certs() takes over a list of certificates containing
non-trusted intermediate certs used for path construction in authentication
of the CMP server and potentially others (TLS server, newly enrolled cert).

OSSL_CMP_CTX_get0_untrusted_certs(OSSL_CMP_CTX *ctx) returns a pointer to the
list of untrusted certs.

OSSL_CMP_CTX_set_log_cb() sets in B<ctx> the log callback function B<cb> for
alert/error/warning/note/info/debug messages. The callback function has type

 typedef void (*OSSL_cmp_log_cb_t)(const char *component,
                                   const char *file, int lineno,
                                   OSSL_CMP_severity level, const char *msg);

and obtains a component identifier (or NULL if not available),
which typically consists of a library name followed by a function name,
the current source file path name (or NULL) and line number (or 0),
the nature of the message, i.e., its severity level as used also for syslog,
and the message text.
It should return 1 on success and 0 on failure.

OSSL_CMP_puts() prints alerts, errors, and warnings to stderr,
whereas note, info, and debug messages are printed to stdout.
The nature of the message is specified by the B<level> parameter. In debug mode
the message B<msg> is preceded by any provided component identifier
B<component>, source file path name B<file>, and line number B<lineno>.
It is also proceded by any given severity indication, namely, "EMERGENCY",
"ALERT", "CRITICAL", "ERROR", "WARNING", "NOTICE", "INFO", or "DEBUG".

OSSL_CMP_printf() outputs alert/error/warning/note/info/debug messages.
The nature of the message is specified by the B<level> parameter.
The message text is given using a format string B<fmt> with variable number of
arguments as with printf. In debug mode
optional information in B<func>, B<file>, and B<lineno> parameters is included.
Output is sent to the log callback if set in B<ctx>, else to OSSL_CMP_puts().

OSSL_CMP_print_errors() outputs any OpenSSL errors in the error queue.
It uses the log callback function if set in the B<ctx>, else OSSL_CMP_puts().

OSSL_CMP_CTX_status_get() returns the PKIstatus from the last
CertRepMessage or Revocation Response, -1 on error.

OSSL_CMP_CTX_statusString_get() returns the statusString from the last
CertRepMessage or Revocation Response, NULL on error.

OSSL_CMP_CTX_set_failInfoCode() sets the failinfo error code bits in
OSSL_CMP_CTX based on the given OSSL_CMP_PKIFAILUREINFO structure,
which is allowed to be NULL.

OSSL_CMP_CTX_failInfoCode_get() returns the CMP error code from the failInfo
field. This is a bit field and the flags for it are specified in
cmp.h. The flags start with OSSL_CMP_CTX_FAILINFO, for example:
OSSL_CMP_CTX_FAILINFO_badAlg.

OSSL_CMP_CTX_set1_proxyName() sets the host name of the HTTP proxy to be used
for connecting to the CA server.

OSSL_CMP_CTX_set_proxyPort() sets the port of the HTTP proxy.
Port defaults to 8080 if not set explicitly.

OSSL_CMP_CTX_set_transfer_cb() sets the message transfer callback function,
which has the type

 typedef int (*OSSL_cmp_transfer_cb_t)(const OSSL_CMP_CTX *ctx,
                                       const OSSL_CMP_MSG *req,
                                       OSSL_CMP_MSG **res);

Default is OSSL_CMP_MSG_http_perform().
The callback should send the CMP request it obtains via the B<req> parameter
and on success place the response in the B<*res> output parameter.
The transfer callback may make use of a custom defined argument stored in
the ctx by means of OSSL_CMP_CTX_set_transfer_cb_arg(), which may be retrieved
again through OSSL_CMP_CTX_get_transfer_cb_arg().
On success the cb must return 0, else a CMP error reason code defined in cmp.h.

OSSL_CMP_CTX_set_transfer_cb_arg() sets an argument, respecively a pointer to a
structure containing arguments, optionally to be used by the transfer callback.
B<arg> is not consumed, and it must therefore explicitly be freed when not
needed any more. B<arg> may be NULL to clear the entry.

OSSL_CMP_CTX_get_transfer_cb_arg() gets the argument, respecively the pointer
to a structure containing arguments, previously set by
OSSL_CMP_CTX_set_transfer_cb_arg().

OSSL_CMP_CTX_set_http_cb() sets the optional http connect/disconnect callback
function, which has the prototype

 typedef BIO *(*OSSL_cmp_http_cb_t)(OSSL_CMP_CTX *ctx, BIO *hbio,
                                    unsigned long detail);

It may modify the HTTP BIO given in the B<hbio> argument
used by OSSL_CMP_MSG_http_perform().
On connect the B<detail> argument is 1.
On disconnect it is 0 if no error occurred or else the last error code.
For instance, on connect a TLS BIO may be prepended to implement HTTPS,
and on disconnect some error diagnostics and/or cleanup may be done.
The callback function should return NULL to indicate failure.
It may make use of a custom defined argument stored in the ctx
by means of OSSL_CMP_CTX_set_http_cb_arg(),
which may be retrieved again through OSSL_CMP_CTX_get_http_cb_arg().

OSSL_CMP_CTX_set_http_cb_arg() sets an argument, respecively a pointer to
a structure containing arguments,
optionally to be used by the http connect/disconnect callback function.
B<arg> is not consumed, and it must therefore explicitly be freed when not
needed any more. B<arg> may be NULL to clear the entry.

OSSL_CMP_CTX_get_http_cb_arg() gets the argument, respecively the pointer to a
structure containing arguments, previously set by
OSSL_CMP_CTX_set_http_cb_arg().

OSSL_CMP_CTX_set1_recipient() sets the recipient name that will be used in the
PKIHeader of a request message, i.e. the X509 name of the (CA) server.
Setting is overruled by subject of srvCert if set.
If neither srvCert nor recipient are set, the recipient of the PKI message is
determined in the following order: issuer, issuer of old cert (oldClCert),
issuer of client cert (clCert), else NULL-DN.
When a response is received, its sender must match the recipient of the request.

OSSL_CMP_CTX_set1_expected_sender() sets the Distinguished Name (DN) expected to
be given in the sender response for messages proteced with MSG_SIG_ALG. This may
be used to enforce that during validation of received messages the given DN
matches the sender field of the PKIMessage header, which in turn is used to
identify the server certificate.
This can be used to ensure that only a particular entity is accepted to act as
CMP server, and attackers are not able to use arbitrary certificates of a
trusted PKI hieararchy to fraudulently pose as server.
This defaults to the subject DN of the certificate set via
OSSL_CMP_CTX_set1_srvCert(), if any.

OSSL_CMP_CTX_set1_serverPath() sets the HTTP path of the CMP server on the host.

OSSL_CMP_CTX_set0_reqExtensions() sets the X.509v3 extensions to be used in
IR/CR/KUR.

OSSL_CMP_CTX_set1_reqExtensions() is like OSSL_CMP_CTX_set0_reqExtensions() but
copies its argument.

OSSL_CMP_CTX_reqExtensions_have_SAN() returns 1 if the context contains
a Subject Alternative Name extension, in all other cases (including errors) 0.

OSSL_CMP_CTX_set_certConf_cb() sets the callback used for evaluating the newly
enrolled certificate before the library sends, depending on its result,
a positive or negative certConf messge to the server. The callback has type

 typedef int (*OSSL_cmp_certConf_cb_t) (OSSL_CMP_CTX *ctx, const X509 *cert,
                                        int fail_info, const char **txt);

and should inspect the certificate it obtains via the B<cert> parameter and may
overrule the pre-decision given in the B<fail_info> and B<*txt> parameters.
If it accepts the certificate it must return 0, indicating success. Else it must
return a bit field reflecting PKIFailureInfo with at least one failure bit and
may set the B<*txt> output parameter to point to a string constant with more
detail.  The transfer callback may make use of a custom defined argument stored
in the B<ctx> by means of OSSL_CMP_CTX_set_certConf_cb_arg(), which may be
retrieved again through OSSL_CMP_CTX_get_certConf_cb_arg().
Typically, the callback will check at least that the certificate can be verified
using a set of trusted certificates.
It also could compare the subject DN and other fields of the newly
enrolled certificate with the certificate template of the request.

OSSL_CMP_certConf_cb() is a basic example certConf callback validating that
the new certificate can be verified with the trusted/untrusted certificates
in B<ctx>. As there is no requirement in RFC 4210 that the certificate can be
validated by the client, this callback is not set by default in the context.
It returns B<fail_info> if it is !=0, 0 on successful validation, or else a bit
field with the OSSL_CMP_PKIFAILUREINFO_incorrectData bit set.

OSSL_CMP_CTX_set_certConf_cb_arg() sets an argument, respecively a pointer to a
structure containing arguments, optionally to be used by the certConf callback.
B<arg> is not consumed, and it must therefore explicitly be freed when not
needed any more. B<arg> may be NULL to clear the entry.

OSSL_CMP_CTX_get_certConf_cb_arg() gets the argument, respecively the pointer to
a structure containing arguments, previously set by
OSSL_CMP_CTX_set_certConf_cb_arg().

OSSL_CMP_CTX_subjectAltName_push1() adds the given X509 name to the list of
alternate names on the certificate template request. This cannot be used if
any Subject Alternative Name extension is set via
OSSL_CMP_CTX_set0_reqExtensions().
By default, unless OSSL_CMP_CTX_OPT_SUBJECTALTNAME_NODEFAULT has been set,
the Subject Alternative Names are copied from the reference certificate,
see OSSL_CMP_CTX_set1_oldClCert().

If set and the subject DN is not set with OSSL_CMP_CTX_set1_subjectName(), then
the certificate template of an IR and CR will not be filled with the default
subject DN from the reference certificate (see OSSL_CMP_CTX_set1_oldClCert().
If a subject DN is desired it needs to be set explicitly with
OSSL_CMP_CTX_set1_subjectName().


=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

The implementation of CMP for OpenSSL is still work in progress. The API
might change every release!

=head1 RETURN VALUES

OSSL_CMP_CTX_create() returns a pointer to an initialized
OSSL_CMP_CTX structure.

OSSL_CMP_CTX_delete() does not return anything.

OSSL_CMP_CTX_extraCertsIn_get1() returns a pointer to a duplicate of the stack
of X.509 certificates received in the extraCerts field of last received
certificate response message IP/CP/KUP which had extraCerts set.  Returns NULL
if there were no caPubs as well as on error.

OSSL_CMP_CTX_caPubs_get1() returns a pointer to a duplicate of the stack of
X.509 certificates received in the caPubs field of last received certificate
response message IP/CP/KUP which had caPubs set.
Returns NULL if there were no caPubs as well as on error.

OSSL_CMP_CTX_get0_trustedStore() returns a pointer to the certificate store
containing trusted root CA certificates. NULL on error.

OSSL_CMP_CTX_get0_untrusted_certs(OSSL_CMP_CTX *ctx) returns a pointer to the
stack of untrusted certificates. NULL on error.

OSSL_CMP_CTX_status_get() returns the PKIStatus from the last CertRepMessage or
Revocation Response, -1 on error.

OSSL_CMP_CTX_statusString_get() returns the statusString from the last
CertRepMessage or Revocation Response, NULL on error.

OSSL_CMP_CTX_get0_newClCert() returns the last received (in IP/KUP/CP) client
certificate from the context. NULL if there was none as well as on error.

OSSL_CMP_CTX_get_transfer_cb_arg() returns the transfer callback argument set
previously. NULL if not set or on function parameter error.

OSSL_CMP_CTX_get_http_cb_arg() returns the http connect/disconnect callback
argument set previously. NULL if not set or on function parameter error.

OSSL_CMP_CTX_get_certConf_cb_arg() returns the certConf callback argument
set previously, NULL if not set or on function parameter error.

OSSL_CMP_CTX_failInfoCode_get() returns the failinfo error code bits in context
as returns bitstring encoded as integer on success, -1 on error.

All other functions return 1 on success, 0 on error.

=head1 EXAMPLE

The following code does an Initialization Request:

        cmp_ctx = OSSL_CMP_CTX_create();
        OSSL_CMP_CTX_set1_serverName(cmp_ctx, opt_serverName);
        OSSL_CMP_CTX_set1_referenceValue(cmp_ctx, ref, ref_len);
        OSSL_CMP_CTX_set1_secretValue(cmp_ctx, sec, sec_len);
        OSSL_CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        OSSL_CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        initialClCert = OSSL_CMP_exec_IR_ses(cmp_ctx);

The following code does an Initialization Request using an
external identity certificate (RFC 4210, Appendix E.7):

        cmp_ctx = OSSL_CMP_CTX_create();
        OSSL_CMP_CTX_set1_serverName(cmp_ctx, sname);
        OSSL_CMP_CTX_set1_clCert(cmp_ctx, cl_cert);
        OSSL_CMP_CTX_set0_pkey(cmp_ctx, pkey);
        OSSL_CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        OSSL_CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        initialClCert = OSSL_CMP_exec_IR_ses(cmp_ctx);

Here externalCert is an X509 certificate granted to the EE by another CA
which is trusted by the current CA the code will connect to.


The following code does a Key Update Request:

        cmp_ctx = OSSL_CMP_CTX_create();
        OSSL_CMP_CTX_set1_serverName(cmp_ctx, sname);
        OSSL_CMP_CTX_set0_pkey(cmp_ctx, pkey);
        OSSL_CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        OSSL_CMP_CTX_set1_clCert(cmp_ctx, cl_cert);
        OSSL_CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        updatedClCert = OSSL_CMP_exec_KUR_ses(cmp_ctx);

The following code (which omits error handling) sends a genm including, as an
example, the id-it-signKeyPairTypes OID and prints info on the genp contents.

    cmp_ctx = OSSL_CMP_CTX_create();
    OSSL_CMP_CTX_set1_serverName(cmp_ctx, sname);
    OSSL_CMP_CTX_set1_referenceValue(cmp_ctx, ref, ref_len);
    OSSL_CMP_CTX_set1_secretValue(cmp_ctx, sec, sec_len);

    ASN1_OBJECT *type = OBJ_txt2obj("1.3.6.1.5.5.7.4.2", 1);
    OSSL_CMP_ITAV *itav = OSSL_CMP_ITAV_new(type, NULL);
    OSSL_CMP_CTX_genm_itav_push0(cmp_ctx, itav);

    STACK_OF(OSSL_CMP_ITAV) *itavs;
    itavs = OSSL_CMP_exec_GENM_ses(cmp_ctx);
    print_itavs(itavs);
    sk_OSSL_CMP_ITAV_pop_free(itavs, OSSL_CMP_ITAV_free);

=head1 SEE ALSO

L<OSSL_CMP_exec_IR_ses(3)>

=head1 COPYRIGHT

Copyright 2007-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
