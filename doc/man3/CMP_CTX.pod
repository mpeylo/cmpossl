=pod

=head1 NAME

 CMP_CTX_create,
 CMP_CTX_init,
 CMP_CTX_delete,
 CMP_CTX_set1_referenceValue,
 CMP_CTX_set1_secretValue,
 CMP_CTX_set1_caCert,
 CMP_CTX_set1_srvCert,
 CMP_CTX_set1_clCert,
 CMP_CTX_set1_oldClCert,
 CMP_CTX_set1_p10CSR,
 CMP_CTX_set1_subjectName,
 CMP_CTX_set1_issuer,
 CMP_CTX_set1_newClCert,
 CMP_CTX_get0_newClCert,
 CMP_CTX_set0_pkey,
 CMP_CTX_set0_newPkey,
 CMP_CTX_set1_pkey,
 CMP_CTX_set1_newPkey,
 CMP_CTX_set1_transactionID,
 CMP_CTX_set1_recipNonce,
 CMP_CTX_set1_last_senderNonce,
 CMP_CTX_set_option,
 CMP_CTX_caPubs_get1,
 CMP_CTX_caPubs_pop,
 CMP_CTX_caPubs_num,
 CMP_CTX_set1_caPubs,
 CMP_CTX_policyOID_push1,
 CMP_CTX_set1_extraCertsOut,
 CMP_CTX_extraCertsOut_push1,
 CMP_CTX_extraCertsOut_num,
 CMP_CTX_extraCertsIn_get1,
 CMP_CTX_set1_extraCertsIn,
 CMP_CTX_extraCertsIn_pop,
 CMP_CTX_extraCertsIn_num,
 CMP_CTX_set0_trustedStore,
 CMP_CTX_get0_trustedStore,
 CMP_CTX_set1_untrusted_certs,
 CMP_CTX_get0_untrusted_certs,
 CMP_CTX_set_error_cb,
 CMP_CTX_set_debug_cb,
 CMP_printf,

 CMP_CTX_status_get,
 CMP_CTX_statusString_get,
 CMP_CTX_failInfoCode_get,
 CMP_CTX_set_failInfoCode,
 CMP_CTX_set_popoMethod,
 CMP_CTX_set1_proxyName,
 CMP_CTX_set_proxyPort,
 CMP_CTX_set0_tlsBIO,
 CMP_CTX_get_tlsBIO,
 CMP_CTX_set1_recipient,
 CMP_CTX_set1_expected_sender,
 CMP_CTX_set1_serverName,
 CMP_CTX_set1_serverPath,
 CMP_CTX_set_serverPort,
 CMP_CTX_set0_reqExtensions,
 CMP_CTX_reqExtensions_have_SAN,
 CMP_CTX_set_transfer_cb,
 CMP_CTX_set_transfer_cb_arg,
 CMP_CTX_get_transfer_cb_arg,
 CMP_CTX_set_certConf_cb,
 CMP_CTX_subjectAltName_push1

=head1 SYNOPSIS

 #include <openssl/cmp.h>

 CMP_CTX *CMP_CTX_create();
 int CMP_CTX_init(CMP_CTX *ctx);
 void CMP_CTX_delete(CMP_CTX *ctx);

 int CMP_CTX_set1_referenceValue(CMP_CTX *ctx, const unsigned char *ref, size_t len);
 int CMP_CTX_set1_secretValue(CMP_CTX *ctx, const unsigned char *sec, const size_t len);
 int CMP_CTX_set1_caCert(CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_srvCert(CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_clCert(CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_oldClCert(CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_p10CSR(CMP_CTX *ctx, const X509_REQ *csr);
 int CMP_CTX_set1_subjectName(CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_issuer(CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_newClCert(CMP_CTX *ctx, const X509 *cert);
 X509 *CMP_CTX_get0_newClCert(CMP_CTX *ctx);
 int CMP_CTX_set0_pkey(CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set0_newPkey(CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_pkey(CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_newPkey(CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_transactionID(CMP_CTX *ctx, const ASN1_OCTET_STRING *id);
 int CMP_CTX_set1_recipNonce(CMP_CTX *ctx, const ASN1_OCTET_STRING *nonce);
 int CMP_CTX_set1_last_senderNonce(CMP_CTX *ctx, const ASN1_OCTET_STRING *nonce);
 int CMP_CTX_set1_serverName(CMP_CTX *ctx, const char *name);
 int CMP_CTX_set_serverPort(CMP_CTX *ctx, int port);
 STACK_OF(X509) *CMP_CTX_caPubs_get1(CMP_CTX *ctx);
 X509 *CMP_CTX_caPubs_pop(CMP_CTX *ctx);
 int CMP_CTX_caPubs_num(CMP_CTX *ctx);
 int CMP_CTX_set1_caPubs(CMP_CTX *ctx, const STACK_OF(X509) *caPubs);
 int CMP_CTX_policyOID_push1(CMP_CTX *ctx, const char *policyOID);
 int CMP_CTX_geninfo_itav_push0(CMP_CTX *ctx, CMP_INFOTYPEANDVALUE *itav);
 int CMP_CTX_genm_itav_push0(CMP_CTX *ctx, CMP_INFOTYPEANDVALUE *itav);

 int CMP_CTX_set1_extraCertsOut(CMP_CTX *ctx, const STACK_OF(X509) *extraCertsOut);
 int CMP_CTX_extraCertsOut_push1(CMP_CTX *ctx, const X509 *val);
 int CMP_CTX_extraCertsOut_num(CMP_CTX *ctx);
 STACK_OF(X509) *CMP_CTX_extraCertsIn_get1(CMP_CTX *ctx);
 int CMP_CTX_set1_extraCertsIn(CMP_CTX *ctx, const STACK_OF(X509) *extraCertsIn);
 X509 *CMP_CTX_extraCertsIn_pop(CMP_CTX *ctx);
 int CMP_CTX_extraCertsIn_num(CMP_CTX *ctx);

 int CMP_CTX_set0_trustedStore(CMP_CTX *ctx, X509_STORE *store);
 X509_STORE *CMP_CTX_get0_trustedStore(CMP_CTX *ctx);

 int CMP_CTX_set1_untrusted_certs(CMP_CTX *ctx, const STACK_OF(X509) *store);
 STACK_OF(X509) *CMP_CTX_get0_untrusted_certs(CMP_CTX *ctx);

 typedef void (*cmp_log_cb_t) (const char *msg);
 int CMP_CTX_set_error_cb(CMP_CTX *ctx, cmp_log_cb_t cb);
 int CMP_CTX_set_debug_cb(CMP_CTX *ctx, cmp_log_cb_t cb);

 void CMP_printf(const CMP_CTX *ctx, const char *fmt, ...);

 int CMP_CTX_set_option(CMP_CTX *ctx, const int opt, const int val);

 long CMP_CTX_status_get(CMP_CTX *ctx);
 CMP_PKIFREETEXT *CMP_CTX_statusString_get(CMP_CTX *ctx);
 unsigned long CMP_CTX_failInfoCode_get(CMP_CTX *ctx);
 int CMP_CTX_set_failInfoCode(CMP_CTX *ctx, CMP_PKIFAILUREINFO *failInfo);
 int CMP_CTX_set_popoMethod(CMP_CTX *ctx, int method);
 int CMP_CTX_set1_proxyName(CMP_CTX *ctx, const char *name);
 int CMP_CTX_set_proxyPort(CMP_CTX *ctx, int port);
 int CMP_CTX_set0_tlsBIO(CMP_CTX *ctx, BIO *sbio);
 BIO *CMP_CTX_get_tlsBIO(CMP_CTX *ctx);
 int CMP_CTX_set1_recipient(CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_expected_sender(CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_serverPath(CMP_CTX *ctx, const char *path);
 int CMP_CTX_set0_reqExtensions(CMP_CTX *ctx, X509_EXTENSIONS *exts);
 int CMP_CTX_reqExtensions_have_SAN(CMP_CTX *ctx);

 typedef int (*cmp_transfer_cb_t) (const CMP_CTX *ctx, const CMP_PKIMESSAGE *req,
                                   CMP_PKIMESSAGE **res);
 int CMP_CTX_set_transfer_cb(CMP_CTX *ctx, cmp_transfer_cb_t cb);
 int CMP_CTX_set_transfer_cb_arg(CMP_CTX *ctx, void *arg);
 void *CMP_CTX_get_transfer_cb_arg(CMP_CTX *ctx);

 typedef int (*cmp_certConf_cb_t) (CMP_CTX *ctx, const X509 *cert, int failure,
                                   const char **txt);
 int CMP_CTX_set_certConf_cb(CMP_CTX *ctx, cmp_certConf_cb_t cb);

 int CMP_CTX_subjectAltName_push1(CMP_CTX *ctx, const GENERAL_NAME *name);

=head1 DESCRIPTION

This is the context API for using CMP (Certificate Management Protocol) with OpenSSL.

CMP_CTX_create() allocates and initialized an CMP_CTX structure.

CMP_CTX_init() initializes the context to default values. Transfer is set to
HTTP, proof-of-possession method to POPOSigningKey

CMP_CTX_delete() frees any allocated non-ASN1 fields of CMP_CTX and
calls the ASN1 defined CMP_CTX_free() function to free the rest.

CMP_CTX_set1_referenceValue() sets the given referenceValue in the given
CMP_CTX structure.

CMP_CTX_set1_secretValue() sets the B<secret> with the length B<len> in the B<ctx>.

CMP_CTX_set1_caCert() sets the given CA Certificate in the given CMP_CTX
structure.

CMP_CTX_set1_srvCert() sets the server certificate to be directly trusted for
verifying response messages. Additionally using CMP_CTX_set0_trustedStore() is
recommended in order to be able to supply verification parameters like CRLs.
The cert pointer is not consumed. It may be NULL to clear the entry.

CMP_CTX_set1_clCert() sets the given client certificate in the given
CMP_CTX structure. The client certificate will then be used by the
functions to set the "sender" field for outgoing messages and it will be
included in the extraCerts field.

CMP_CTX_set1_oldClCert() sets the old certificate to be updated in KUR or to be
revoked in RR. It must be given for RR, else it defaults to B<clCert>.
The reference certificate determined in this way, if any, is also used for
deriving default subject DN and Subject Alternative Names for IR, CR, and KUR.
Its issuer, if any, is used as default recipient in the CMP message header.

CMP_CTX_set1_p10CSR() sets the PKCS#10 CSR to be used in P10CR.

CMP_CTX_set1_subjectName() sets the subject DN that will be used in
the CertTemplate structure when requesting a new cert. For KUR, it defaults to
the subject DN of the reference certificate, see CMP_CTX_set1_oldClCert().
This default is used for IR and CR only if no SANs are set.

If clCert is not set (e.g. in case of IR with MSG_MAC_ALG), the subject DN
is also used as sender of the PKI message.

CMP_CTX_set1_issuer() sets the name of the intended issuer that
will be set in the CertTemplate, i.e., the X509 name of the CA server.

CMP_CTX_set1_newClCert() sets the given (newly enrolle) client certificate
in the given CMP_CTX structure.

CMP_CTX_get0_newClCert() returns a pointer to the last enrolled certificate.

CMP_CTX_set0_pkey() sets the given EVP_PKEY structure, holding the
private and public keys, corresponding to the client certificate set with
B<CMP_CTX_set1_clCert()> in the given CMP_CTX structure.
Used to create the protection in case of MSG_SIG_ALG.

CMP_CTX_set1_pkey() is the same as CMP_CTX_set0_pkey(),
except that it does not consume the pointer.

CMP_CTX_set0_newPkey() sets the given EVP_PKEY structure, holding the
private and public keys, which shall be certified, in the given CMP_CTX
structure

CMP_CTX_set1_newPkey() is the same as CMP_CTX_set0_newPkey(),
except that it does not consume the pointer.

CMP_CTX_set1_transactionID() sets the given transaction ID in the given
CMP_CTX structure.

CMP_CTX_set1_recipNonce() sets the given recipient nonce in the given
CMP_CTX structure.

CMP_CTX_set1_last_senderNonce() stores the last sent sender B<nonce> in
the B<ctx>. This will be used to validate the recipNonce in incoming messages.

CMP_CTX_set1_serverName() sets the given server Address (as IP or name)
in the given CMP_CTX structure.

CMP_CTX_set_serverPort() sets the port of the CMP server to connect to.  Port
defaults to 8080 if not set explicitly.

CMP_CTX_set_option() sets the given value for the given option
(e.g. CMP_CTX_OPT_IMPLICITCONFIRM) in the given CMP_CTX structure.

The following options can be set:
    CMP_CTX_OPT_IMPLICITCONFIRM
        Request server to enable implicit confirm mode, where the client
        does not need to send confirmation upon receiving the
        certificate. If the server does not enable implicit confirmation
        in the return message, then confirmation is sent anyway.

    CMP_CTX_OPT_DISABLECONFIRM
        Do not confirm enrolled certificates, to cope with broken servers
        not supporting implicit confirmation correctly.
B<WARNING:> This setting leads to unspecified behavior and it is meant
exclusively to allow interoperability with server implementations violating
RFC 4210.

    CMP_CTX_OPT_UNPROTECTED_REQUESTS
        Send messages without CMP-level protection.

    CMP_CTX_OPT_SUBJECTALTNAME_NODEFAULT
        Do not take default Subject Alternative Names
        from the reference certificate.

    CMP_CTX_OPT_SUBJECTALTNAME_CRITICAL
        Demand that the given Subject Alternative Names are flagged as critical.

    CMP_CTX_OPT_POLICIES_CRITICAL
        Demand that the given policies are flagged as critical.

    CMP_CTX_OPT_VALIDITYDAYS
        Number of days new certificates are asked to be valid for.

    CMP_CTX_OPT_POPOMETHOD
        Select the proof of possession method to use. Possible values are:
            CRMF_POPO_NONE      - ProofOfPossession field omitted
            CRMF_POPO_SIGNATURE - sign a value with private key
            CRMF_POPO_ENCRCERT - decrypt the encrypted certificate
                                 ("indirect method")
            CRMF_POPO_RAVERIFIED - assert that the RA has already
                                   verified the PoPo

    CMP_CTX_OPT_DIGEST_ALGNID
        The digest algorithm NID to be used in RFC 4210's MSG_SIG_ALG,
        if applicable used for message protection and Proof-of-Possession.

    CMP_CTX_OPT_IGNORE_KEYUSAGE
        Ignore CMP-level cerificate key usage,
        else 'digitalSignature' is required for signatures.

    CMP_CTX_OPT_UNPROTECTED_ERRORS
        Accept unprotected error responses: regular error messages as well as
        certificate responses (IP/CP/KUP) and revocation responses (RP) with rejection.
B<WARNING:> This setting leads to unspecified behavior and it is meant
exclusively to allow interoperability with server implementations violating
RFC 4210.

    CMP_CTX_OPT_MSGTIMEOUT
        Number of seconds (or 0 for infinite) a CMP message round trip is
        allowed to take before a timeout error is returned. Default is 120.

    CMP_CTX_OPT_MAXPOLLTIME
        Maximum total number of seconds to attempt polling for
        certificates on 'waiting' PKIStatus. Default is 0 (infinite).

    CMP_CTX_PERMIT_TA_IN_EXTRACERTS_FOR_IR
        Allow retrieving a trust anchor from extraCers and using that
        to validate the certificate chain of an IP message.

    CMP_CTX_OPT_REVOCATION_REASON
        The reason code to be included in revocation request (RR);
        values: 0..10 (RFC 5210, 5.3.1) or -1 for none (which is the default)

CMP_CTX_caPubs_num() can be used after an Initial Request or Key Update
request to check the number of CA certificates that were sent from the
server.

CMP_CTX_caPubs_get1() returns a pointer to a duplicate of the stack of X.509
certificates received in the caPubs field of last received certificate response
message IP/CP/KUP which had caPubs set.

CMP_CTX_caPubs_pop() pops one CA certificates of the stack of received
CA certs and returns it

CMP_CTX_set1_caPubs() copies the given caPubs stack to the context so
that it may be accessed later by CMP_CTX_caPubs_num() and
CMP_CTX_caPubs_pop().

CMP_CTX_policyOID_push1() adds the certificate policy OID given by the
string to the X509_EXTENSIONS of the requested certificate template.
Returns -1 on parse error.

CMP_CTX_geninfo_itav_push0() adds B<itav> to the stack in the B<ctx> to be added
to the GeneralInfo field of the CMP PKIMessage header of a request message sent
with this context.  Consumes the pointer to B<itav>.

CMP_CTX_genm_itav_push0() adds B<itav> to the stack in the B<ctx> which will be
the body of a General Message sent with this context.  Consumes the pointer to
B<itav>.

CMP_CTX_set1_extraCertsOut() sets the stack of extraCerts that will be
sent to remote.

CMP_CTX_extraCertsOut_push1() adds the given certificate to the outbound
extraCerts stack, without consuming the pointer.

CMP_CTX_extraCertsOut_num() returns the number of certificates in the
outbound extraCerts stack.

CMP_CTX_extraCertsIn_get1() returns a pointer to a duplicate of the stack of
X.509 certificates received in the extraCerts field of last received
certificate response message IP/CP/KUP which had extraCerts set.

CMP_CTX_set1_extraCertsIn() sets the stack of extraCerts that was
received from remote.

CMP_CTX_extraCertsIn_pop() pops and returns one certificate off the
stack of extra certificates received from remote.

CMP_CTX_extraCertsIn_num() returns the number of certificates that were
received from remote.

CMP_CTX_set0_trustedStore() sets the X509_STORE type certificate store
containing trusted (root) CA certificates and possibly CRLs and a certificate
verification callback function used for CMP server authentication.

CMP_CTX_get0_trustedStore() returns a pointer to the certificate store
containing trusted root CA certificates. NULL on error.

CMP_CTX_set1_untrusted_certs() takes over a list of certificates
containing non-trusted intermediate certificates used for path construction
in CMP server authentication.

CMP_CTX_get0_untrusted_certs(CMP_CTX *ctx) returns a pointer to the list of
untrusted certs.

CMP_CTX_set_error_cb() sets the callback for receiving error messages.
The callback obtains the error string via the B<msg> parameter.

CMP_CTX_set_debug_cb() sets the callback for receiving debug messages.
The callback obtains the debug string via the B<msg> parameter.

CMP_printf() is used for printing debug messages if debug_cb is set
(CMP_CTX_init defaults to puts()).

CMP_CTX_status_get() returns the PKIstatus from the last
CertRepMessage or Revocation Response, -1 on error.

CMP_CTX_statusString_get() returns the statusString from the last
CertRepMessage or Revocation Response, NULL on error.

CMP_CTX_set_failInfoCode() sets the failinfo error code bits in CMP_CTX
based on the given CMP_PKIFAILUREINFO structure, which is allowed to be NULL.

CMP_CTX_failInfoCode_get() returns the CMP error code from the failInfo
field. This is a bit field and the flags for it are specified in
cmp.h. The flags start with CMP_CTX_FAILINFO, for example:
CMP_CTX_FAILINFO_badAlg.

CMP_CTX_set1_proxyName() sets the host name of the HTTP proxy to be used
for connecting to the CA server.

CMP_CTX_set_proxyPort() sets the port of the HTTP proxy.  Port defaults to 8080
if not set explicitly.

CMP_CTX_set0_tlsBIO() sets the SSL/TLS BIO to be used for HTTPS.
The argument value may be NULL for none, which is the default.

CMP_CTX_get0_tlsBIO() returns the SSL/TLS BIO used for HTTPS, or NULL.

CMP_CTX_set1_recipient() sets the recipient name that will be used in the
PKIHeader of a request message, i.e. the X509 name of the (CA) server.
Setting is overruled by subject of srvCert if set.
If neither srvCert nor recipient are set, the recipient of the PKI message is
determined in the following order: issuer, issuer of old cert (oldClCert),
issuer of client cert (clCert), else NULL-DN.
When a response is received, its sender must match the recipient of the request.

CMP_CTX_set1_expected_sender() sets the sender name that will be expected in
the PKIHeader of response messages, i.e. the X509 name of the (CA) server.
If not set, the recipient name determined as specified in
CMP_CTX_set1_recipient() will be used.

CMP_CTX_set1_serverPath() sets the HTTP path of the CMP server on the host.

CMP_CTX_set0_reqExtensions() sets the X.509v3 extensions to be used in IR/CR/KUR

CMP_CTX_reqExtensions_have_SAN() returns 1 if the context contains
a Subject Alternative Name extension, in all other cases (including errors) 0.

CMP_CTX_set_transfer_cb() sets the message transfer callback function.
Default is CMP_PKIMESSAGE_http_perform().
The callback should send the CMP request it obtains via the B<req> parameter
and on success place the response in the B<*res> output parameter.
The transfer callback may make use of a custom defined argument stored in
the ctx by means of CMP_CTX_set_transfer_cb_arg(), which may be retrieved
again through CMP_CTX_get_transfer_cb_arg().
On success the cb must return 0, else a CMP error reason code defined in cmp.h.

CMP_CTX_set_transfer_cb_arg() sets an argument, respecively a pointer to a
structure containing arguments, optionally to be used by the transfer callback.
B<arg> is not consumed, and it must therefore explicitly be freed when not
needed any more. B<arg> may be NULL to clear the entry.

CMP_CTX_get_transfer_cb_arg() gets the argument, respecively the pointer to a
structure containing arguments, previously set by CMP_CTX_set_transfer_cb_arg().

CMP_CTX_set_certConf_cb() sets the callback used for evaluating the newly
enrolled certificate before the library sends, depending on its result,
a positive or negative certConf messge to the server. The callback should
inspect the certificate it obtains via the B<cert> parameter and may
overrule the pre-decision given in the B<failure> and B<*txt> parameters.
If it accepts the certificate it must return -1, indicating success. Else it
must return a bit number <= CMP_PKIFAILUREINFO_MAX indicating failure and may
set the B<*txt> output parameter to point to a string constant with more detail.
Typically, the callback will check at least that the certificate can be verified
using a set of trusted certificates.
It also could compare the subject DN and other fields of the newly
enrolled certificate with the certificate template of the request.

CMP_CTX_subjectAltName_push1() adds the given X509 name to the list of
alternate names on the certificate template request. This cannot be used if
any Subject Alternative Name extension is set via CMP_CTX_set0_reqExtensions().
By default, unless CMP_CTX_OPT_SUBJECTALTNAME_NODEFAULT has been set,
the Subject Alternative Names are copied from the reference certificate,
see CMP_CTX_set1_oldClCert().

If set and the subject DN is not set with CMP_CTX_set1_subjectName(), then the
certificate template of an IR and CR will not be filled with the default subject
DN from the reference certificate (see CMP_CTX_set1_oldClCert(). If a subject DN
is desired it needs to be set explicitly with CMP_CTX_set1_subjectName().


=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

The implementation of CMP for OpenSSL is still work in progress. The API
might change every release!

=head1 RETURN VALUES

CMP_CTX_create() returns a pointer to an initialized CMP_CTX structure.

CMP_CTX_delete() and CMP_printf() do not return anything.

CMP_CTX_extraCertsIn_num(), CMP_CTX_extraCertsOut_num(), CMP_CTX_caPubs_num(),
return the number of relevant certificates, or -1 on error.

CMP_CTX_extraCertsIn_pop(), CMP_CTX_caPubs_pop() return the respective pop-ed
certificate, or NULL if stack is empty as well as on error.

CMP_CTX_extraCertsIn_get1() returns a pointer to a duplicate of the stack of
X.509 certificates received in the extraCerts field of last received
certificate response message IP/CP/KUP which had extraCerts set.  Returns NULL
if there were no caPubs as well as on error.

CMP_CTX_caPubs_get1() returns a pointer to a duplicate of the stack of X.509
certificates received in the caPubs field of last received certificate response
message IP/CP/KUP which had caPubs set.  Returns NULL if there were no caPubs
as well as on error.

CMP_CTX_get0_trustedStore() returns a pointer to the certificate store
containing trusted root CA certificates. NULL on error.

CMP_CTX_get0_untrusted_certs(CMP_CTX *ctx) returns a pointer to the stack of
untrusted certificates. NULL on error.

CMP_CTX_status_get() returns the PKIStatus from the last CertRepMessage or
Revocation Response, -1 on error.

CMP_CTX_statusString_get() returns the statusString from the last
CertRepMessage or Revocation Response, NULL on error.

CMP_CTX_get0_newClCert() returns the last received (in IP/KUP/CP) client
certificate from the context. NULL if there was none as well as on error.

CMP_CTX_get0_tlsBIO() returns the SSL/TLS BIO to be used for HTTPS, NULL if
none as well as on error.

CMP_CTX_get_transfer_cb_arg() returns transfer callback argument set previously.
NULL if not set or on function parameter error.

CMP_CTX_failInfoCode_get() returns the failinfo error code bits in context as
returns bitstring in ulong on success, -1 on error.

CMP_CTX_error_cb() always returns 1.

All other functions return 1 on success, 0 on error.

=head1 EXAMPLE

The following code does an Initialization Request:

        cmp_ctx = CMP_CTX_create();
        CMP_CTX_set1_serverName(cmp_ctx, opt_serverName);
        CMP_CTX_set1_referenceValue(cmp_ctx, ref, ref_len);
        CMP_CTX_set1_secretValue(cmp_ctx, sec, sec_len);
        CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        initialClCert = CMP_exec_IR_ses(cmp_ctx);

The following code does an Initialization Request using an
external identity certificate (RFC 4210, Appendix E.7):

        cmp_ctx = CMP_CTX_create();
        CMP_CTX_set1_serverName(cmp_ctx, sname);
        CMP_CTX_set1_clCert(cmp_ctx, cl_cert);
        CMP_CTX_set0_pkey(cmp_ctx, pkey);
        CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        initialClCert = CMP_exec_IR_ses(cmp_ctx);

Here externalCert is an X509 certificate granted to the EE by another CA
which is trusted by the current CA the code will connect to.


The following code does a Key Update Request:

        cmp_ctx = CMP_CTX_create();
        CMP_CTX_set1_serverName(cmp_ctx, sname);
        CMP_CTX_set0_pkey(cmp_ctx, pkey);
        CMP_CTX_set0_newPkey(cmp_ctx, new_pkey);
        CMP_CTX_set1_clCert(cmp_ctx, cl_cert);
        CMP_CTX_set1_caCert(cmp_ctx, ca_cert);

        updatedClCert = CMP_exec_KUR_ses(cmp_ctx);

The following code (which omits error handling) sends a genm including, as an
example, the id-it-signKeyPairTypes OID and prints info on the genp contents.

    cmp_ctx = CMP_CTX_create();
    CMP_CTX_set1_serverName(cmp_ctx, sname);
    CMP_CTX_set1_referenceValue(cmp_ctx, ref, ref_len);
    CMP_CTX_set1_secretValue(cmp_ctx, sec, sec_len);

    ASN1_OBJECT *type = OBJ_txt2obj("1.3.6.1.5.5.7.4.2", 1);
    CMP_INFOTYPEANDVALUE *itav = CMP_ITAV_new(type, NULL);
    CMP_CTX_genm_itav_push0(cmp_ctx, itav);

    STACK_OF(CMP_INFOTYPEANDVALUE) *itavs;
    itavs = CMP_exec_GENM_ses(cmp_ctx);
    print_itavs(itavs);
    sk_CMP_INFOTYPEANDVALUE_pop_free(itavs, CMP_INFOTYPEANDVALUE_free);

=head1 SEE ALSO

L<CMP_ses(3)>
