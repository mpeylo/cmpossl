#!/usr/bin/make

# Optional OPENSSL_DIR defines where to find the OpenSSL installation
#   with header files at include/openssl (default: will try, e.g., /usr).
# Optional OPENSSL_LIB defines where to find the OpenSSL libraries
#   (default: will try, e.g., OPENSSL_DIR/lib).
# Optional CFLAGS and LDFLAGS are appended by local settings.
# Optional DEBUG_FLAGS may set to prepend to local CFLAGS and LDFLAGS (default see below).
# Builds are done in release mode if optional NDEBUG is defined.
# Optional OUT_DIR defines where to place the resulting library (default: ".").
# Optional DESTDIR defines a prefix for the installation target directories.
# All paths may be absolute or relative to the directory containing this Makefile.

SHELL=bash # This is needed for supporting extended file name globbing

# variables ####################################################################

ifeq ($(OS),Windows_NT)
#   EXE=.exe
    DLL=.dll
    OBJ=.obj
#   LIB=bin
else
#   EXE=
    OBJ=.o
#   LIB=lib
    ifeq ($(shell uname -s),Darwin)
        OS=MacOS
        DLL=.dylib
        SONAME=install_name,@rpath/
    else # assuming Linux
        DLL=.so
        SONAME=soname,
    endif
endif

ROOTFS ?= $(DESTDIR)$(prefix)

VERSION=2.0
# must be kept in sync with latest version in debian/changelog
# PACKAGENAME=libcmp
# DIRNAME=$(PACKAGENAME)-$(VERSION)

override OUT_DIR ?= .

# ifeq ($(shell echo $(OPENSSL_DIR) | grep "^/"),)
# # $(OPENSSL_DIR) is relative path or emtpy/unset
#     OPENSSL=$(OPENSSL_DIR)
#     override OPENSSL_LIB ?= $(OPENSSL_LIB_)
#     OPENSSL_RPATH=$(OPENSSL_LIB_)
#     OPENSSL_RPATH_LIB=$(OPENSSL_LIB_)
# else
# # $(OPENSSL_DIR) is absolute path
#     OPENSSL=$(OPENSSL_DIR)
#     override OPENSSL_LIB ?= $(OPENSSL_LIB_)
#     OPENSSL_RPATH=$(OPENSSL_DIR)
#     OPENSSL_RPATH_LIB=$(OPENSSL_LIB)
# endif

MAKECMDGOALS ?= default
ifneq ($(filter-out update doc install uninstall clean clean_all clean_deb,$(MAKECMDGOALS)),)

    # export OPENSSL_DIR OPENSSL_LIB # gets ignored on MacOS,
    # workaround is to explicitly pass them down to recursive calls when needed
    ifeq ($(OPENSSL_DIR),)
        OPENSSL_DIR := $(shell $(MAKE) -f OpenSSL_version.mk -s 2>/dev/null --no-print-directory dir OPENSSL_LIB="$(OPENSSL_LIB)")
        ifeq ($(OPENSSL_DIR),)
            $(error Error determining OPENSSL_DIR)
        endif
    endif
    override OPENSSL_DIR := $(realpath $(OPENSSL_DIR))

    ifeq ($(OPENSSL_LIB),)
        # must use ":=" below to avoid error: Recursive variable `OPENSSL_LIB' references itself (eventually)
        OPENSSL_LIB := $(shell $(MAKE) -f OpenSSL_version.mk  -s 2>/dev/null --no-print-directory lib OPENSSL_DIR="$(OPENSSL_DIR)")
        ifeq ($(OPENSSL_LIB),)
            $(error Error determining OPENSSL_LIB)
        endif
    endif
    override OPENSSL_LIB := $(realpath $(OPENSSL_LIB))

    OPENSSL_VERSION=$(shell $(MAKE) -f OpenSSL_version.mk -s 2>/dev/null --no-print-directory SOURCE=header OPENSSL_DIR="$(OPENSSL_DIR)")
    $(info Build info: source directory is '$(PWD)')
    $(info detected OpenSSL base directory '$(OPENSSL_DIR)')
    $(info detected OpenSSL lib  directory '$(OPENSSL_LIB)')
    $(info detected OpenSSL version         $(OPENSSL_VERSION))
    OPENSSL_INC_DIR = $(OPENSSL_DIR)/include/openssl
    ifeq ($(wildcard $(OPENSSL_INC_DIR)),)
        $(error cannot find directory '$(OPENSSL_INC_DIR)', check OPENSSL_DIR variable)
    endif
    ifeq ($(OPENSSL_VERSION),)
        $(warning cannot determine version of OpenSSL in directory '$(OPENSSL_DIR)', assuming 3.0)
        OPENSSL_VERSION=3.0
    endif
    OSSL_VERSION_QUIRKS=-D'DEPRECATEDIN_1_2_0(f)= ' # needed for 1.2
    ifeq ($(shell expr "$(OPENSSL_VERSION)" \< 1.1),1) # same as comparing == 1.0
        ifeq ($(shell expr "$(OPENSSL_VERSION)" \< 1.0),1)
            $(error detected incompatible OpenSSL version $(OPENSSL_VERSION))
        endif
        $(info enabling compilation quirks for old OpenSSL 1.0.x versions)
        OSSL_VERSION_QUIRKS+=-Wno-discarded-qualifiers -Wno-unused-parameter
        # -Wno-unused-function #-D'DEPRECATEDIN_1_1_0(f)=f;' -D'DEPRECATEDIN_1_0_0(f)='
    endif
endif


# building #####################################################################

.phony: default
default: build

.phony: update
update:
	git fetch
	git rebase origin

LIBCMP_INC=include/cmp
override OUTLIB_= libcmp
STATIC_OUTLIB=$(OUTLIB_).a
OUTLIB=$(OUTLIB_)$(DLL)
ifeq ($(OS),MacOS)
    OUTLIBV=$(OUTLIB_).$(VERSION)$(DLL)
else
    OUTLIBV=$(OUTLIB).$(VERSION)
endif

CC ?= gcc
ifdef NDEBUG
    override DEBUG_FLAGS ?= -O2
    override DEBUG_FLAGS += -DNDEBUG=1 -Werror
else
    override DEBUG_FLAGS ?= -g -O0 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all # not every compiler(version) supports -Og
endif
override CFLAGS += $(DEBUG_FLAGS)
# override CFLAGS += -std=gnu90  # TODO maybe clean up code and re-enable flag
override CFLAGS += -DDEBUG_UNUSED -DPEDANTIC -pedantic \
  -Wall -Woverflow -Wextra -Wswitch -Wsign-compare -Wmissing-prototypes \
  -Wstrict-prototypes -Wshadow -Wformat -Wtype-limits -Wundef $(OSSL_VERSION_QUIRKS)
override CFLAGS += -isystem $(LIBCMP_INC) # important for taking precedence over any (older) OpenSSL CMP headers
override CFLAGS += -isystem $(OPENSSL_DIR)/include # use of -isystem is critical for selecting wanted OpenSSL version
INCLUDE_OPENSSL_BACKPORT = -include $(LIBCMP_INC)/openssl/openssl_backport.h # used to force inclusion of standalone version
LOCAL_CFLAGS = -fPIC -DCMP_STANDALONE $(INCLUDE_OPENSSL_BACKPORT)

override LDFLAGS += -L $(OPENSSL_LIB)# -L $(OPENSSL_LIB_)
ifeq ($(DEB_TARGET_ARCH),) # not during Debian packaging
#   override LDFLAGS += -Wl,-rpath,$(OPENSSL_RPATH_LIB)
#   ifneq ($(OPENSSL_RPATH_LIB),$(OPENSSL_RPATH))
#       override LDFLAGS += -Wl,-rpath,$(OPENSSL_RPATH)
#   endif
    override LDFLAGS += -Wl,-rpath,$(OPENSSL_LIB)
endif
override LDLIBS  += -lcrypto

LIBCMP_INC_HDRS          = $(patsubst %,$(LIBCMP_INC)/openssl/%,$(LIBCMP_HDRS_))
LIBCMP_INC_HDRS_INTERNAL = $(patsubst %,$(LIBCMP_INC)/internal/%,$(LIBCMP_HDRS_INTERNAL_))
CMP_SRCS_ = cmp_asn.c cmp_ctx.c cmp_err.c cmp_http.c cmp_hdr.c cmp_msg.c cmp_protect.c cmp_client.c cmp_server.c cmp_status.c cmp_vfy.c cmp_util.c openssl_backport.c
CRMF_SRCS_ = crmf_asn.c crmf_err.c crmf_lib.c crmf_pbm.c
HTTP_SRCS_ = http_client.c http_err.c http_lib.c
LIBCMP_SRCS = $(patsubst %,crypto/crmf/%,$(CRMF_SRCS_)) \
    $(patsubst %,crypto/cmp/%,$(CMP_SRCS_)) \
    $(patsubst %,crypto/http/%,$(HTTP_SRCS_))

# Target object files lookup in src directory (which is reused as build directory)
OBJS = $(LIBCMP_SRCS:.c=$(OBJ))

.phony: build clean clean_all

$(OUT_DIR):
	@mkdir -p $(OUT_DIR)

build: $(OUT_DIR) $(OUT_DIR)/$(OUTLIB)
# ifeq ($(STATIC_LIBCMP),)
build: $(OUT_DIR)/$(STATIC_OUTLIB)
# endif

$(OUT_DIR)/$(OUTLIBV): $(OBJS)
	$(CC) $(OBJS) $(LDFLAGS) $(LDLIBS) -shared -o $@ -Wl,-$(SONAME)$(OUTLIBV)

$(OUT_DIR)/$(OUTLIB): $(OUT_DIR)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(OUT_DIR)/$(OUTLIB)

# Individual object targets; also provide dependencies on header files of the project (not on system headers)
%$(OBJ): %.c # $(LIBCMP_INC_HDRS) $(LIBCMP_INC_HDRS_INTERNAL)
	 $(CC) $(CFLAGS) $(LOCAL_CFLAGS) -c $< -o $@
	@$(CC) $(CFLAGS) $(LOCAL_CFLAGS) -MM $< -MT $@ -MF $*.d
DEPS = $(OBJS:$(OBJ)=.d)
ifeq ($(findstring clean,$(MAKECMDGOALS)),)
-include $(DEPS)
endif

$(OUT_DIR)/$(STATIC_OUTLIB): $(OBJS)
	ar rcs $@ $(OBJS)


# cleaning #####################################################################

clean:
	rm -f $(OBJS)
	rm -fr $(OUT_DIR)/{$(OUTLIB_)*$(DLL)*,$(STATIC_OUTLIB)}
	rm -f *.3{,.gz} libcmp-*.zip

clean_all: clean clean_deb
	rm -fr Makefile CMakeCache.txt *.cmake CMakeFiles/
	rm -f install_manifest*.txt

DEST_PRE=$(ROOTFS)/usr
DEST_LIB=$(DEST_PRE)/lib
DEST_INC=$(DEST_PRE)/include/cmp
DEST_MAN=$(DEST_PRE)/share/man/man3
LIBCMP_DOCS_ = $(wildcard doc/man3/*.pod)

.phony: install uninstall


# installation #################################################################

install: # $(OUT_DIR)/$(OUTLIB).$(VERSION)
	install -D $(OUT_DIR)/$(OUTLIBV) $(DEST_LIB)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(DEST_LIB)/$(OUTLIB)
#install_headers:
	mkdir -p $(DEST_INC)/openssl
	install -D $(LIBCMP_INC)/openssl/*.h $(DEST_INC)/openssl
#install_doc:
	mkdir -p $(DEST_MAN)
	install -D $(LIBCMP_DOCS_) $(DEST_MAN)

uninstall:
	rm -f $(DEST_LIB)/$(OUTLIB_)*$(DLL)*
	rm -rf $(DEST_INC)/openssl
	rmdir 2>/dev/null $(DEST_INC) || true
	@ #rm -f $(LIBCMP_DOCS_install)
	rm -f $(DEST_MAN)/{OSSL_*{.pod,.gz},changelog.gz,copyright}
	rmdir 2>/dev/null $(DEST_MAN) || true


# Debian packaging #############################################################

#SRCS=$(shell ls Makefile_cmp include/openssl/{{cmp,crmf,http}{,err}.h,safestack_backport.h} crypto/{cmp,crmf,http}/*.{c,h})
#SRCS_TAR=cmpossl_0.1.0.orig.tar.gz
.phony: deb clean_deb
deb:
	@ #tar czf $(SRCS_TAR) $(SRCS)
	debuild -e OPENSSL_DIR="$(OPENSSL_DIR)" -e OPENSSL_LIB="$(OPENSSL_LIB)" \
	  -uc -us --lintian-opts --profile debian # --fail-on none
	@ #rm $(SRCS_TAR)
# alternative:
#	LD_LIBRARY_PATH= dpkg-buildpackage -uc -us # may prepend DH_VERBOSE=1

clean_deb:
	rm -rf debian/{.debhelper,tmp,libcmp{,-dev}} debian-packaging
	rm -f debian/{files,debhelper-build-stamp} debian/*.{log,substvars}
	rm -f ../libcmp*.{deb,dsc,build*,changes,tar.gz}
	rm -fr _CPack_Packages changelog.gz
	rm -f libcmp*.{deb,tar.gz}
