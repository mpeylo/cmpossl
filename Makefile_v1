#!/usr/bin/make

# Optional OPENSSL_DIR defines where to find the OpenSSL installation (default: "/usr" or ".").
# Optional OPENSSL_LIB defines where to find the OpenSSL library installation (default: ROOTFS/usr/lib or ".").
# Optional CFLAGS and LDFLAGS are appended by local settings.
# Optional DEBUG_FLAGS may set to prepend to local CFLAGS and LDFLAGS (default see below).
# Builds are done in release mode if optional NDEBUG is defined.
# Optional OUT_DIR defines where the resulting cmp lib will be placed (default: ".").
# Optional DESTDIR defines a prefix for the installation target directories.
# These paths may be absolute or relative to the dir containing this Makefile.

SHELL=bash # This is needed for supporting extended file name globbing

ifeq ($(OS),Windows_NT)
#   EXE=.exe
    DLL=.dll
    OBJ=.obj
    LIB=bin
else
#   EXE=
    OBJ=.o
    LIB=lib
    ifeq ($(shell uname -s),Darwin)
        OS=MacOS
        DLL=.dylib
        SONAME=install_name,@rpath/
    else # assuming Linux
        DLL=.so
        SONAME=soname,
    endif
endif

ROOTFS ?= $(DESTDIR)$(prefix)

VERSION=2.0
# must be kept in sync with latest version in debian/changelog
# PACKAGENAME=libcmp
# DIRNAME=$(PACKAGENAME)-$(VERSION)

ifeq ($(OUT_DIR),)
    override OUT_DIR=.
endif

SYSTEM_INCLUDE_OPENSSL=/usr/include/openssl
ifeq ($(OPENSSL_DIR),)
   ifneq (,$(wildcard $(SYSTEM_INCLUDE_OPENSSL)))
     override OPENSSL_DIR=/usr
   else
     override OPENSSL_DIR=.
   endif
endif
ifeq ($(shell echo $(OPENSSL_DIR) | grep "^/"),)
# $(OPENSSL_DIR) is relative path
    OPENSSL=$(OPENSSL_DIR)
    OPENSSL_LIB ?= $(OPENSSL)
    OPENSSL_RPATH=$(OPENSSL)
    OPENSSL_RPATH_LIB=$(OPENSSL)
else
# $(OPENSSL_DIR) is absolute path
    OPENSSL=$(OPENSSL_DIR)
    OPENSSL_LIB ?= $(OPENSSL)
    OPENSSL_RPATH=$(OPENSSL_DIR)
    OPENSSL_RPATH_LIB=$(OPENSSL_LIB)
endif

MAKECMDGOALS ?= default
ifneq ($(filter-out doc update uninstall clean clean_all clean_deb,$(MAKECMDGOALS)),)
    ifeq (,$(wildcard $(OPENSSL_DIR)/include/openssl))
        $(error cannot find directory '$(OPENSSL_DIR)/include/openssl', check OPENSSL_DIR variable)
    endif
    OPENSSL_VERSION=$(shell $(MAKE) -f OpenSSL_version.mk -s --no-print-directory LIB=h OPENSSL_DIR="$(OPENSSL_DIR)")
    ifeq ($(OPENSSL_VERSION),)
        $(warning cannot determine version of OpenSSL in directory '$(OPENSSL_DIR)', assuming 1.1.1)
        OPENSSL_VERSION=1.1.1
    endif
    $(info detected OpenSSL version $(OPENSSL_VERSION).x)
    OSSL_VERSION_QUIRKS=-D'DEPRECATEDIN_1_2_0(f)= ' # needed for 1.2
    ifeq ($(shell expr "$(OPENSSL_VERSION)" \< 1.1),1) # same as comparing == 1.0
        $(info enabling compilation quirks for OpenSSL 1.0.2)
        OSSL_VERSION_QUIRKS+=-Wno-discarded-qualifiers -Wno-unused-parameter #-Wno-unused-function #-D'DEPRECATEDIN_1_1_0(f)=f;' -D'DEPRECATEDIN_1_0_0(f)='
    endif
endif

.phony: default
default: build

.phony: update
update:
	git fetch
	git rebase origin

LIBCMP_INC=include/cmp
OUTLIB_=libcmp
OUTLIB=$(OUTLIB_)$(DLL)
ifeq ($(OS),MacOS)
    OUTLIBV=$(OUTLIB_).$(VERSION)$(DLL)
else
    OUTLIBV=$(OUTLIB).$(VERSION)
endif

CC ?= gcc
ifdef NDEBUG
    DEBUG_FLAGS ?= -O2
    override DEBUG_FLAGS += -DNDEBUG=1
else
    DEBUG_FLAGS ?= -g -O0 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all # not every compiler(version) supports -Og
endif
override CFLAGS += $(DEBUG_FLAGS) -fPIC -DDEBUG_UNUSED -DPEDANTIC -pedantic \
  -Wall -Woverflow -Wextra -Wswitch -Wsign-compare -Wmissing-prototypes \
  -Wstrict-prototypes -Wshadow -Wformat -Wtype-limits -Wundef $(OSSL_VERSION_QUIRKS)# -Werror
override CFLAGS += -isystem $(LIBCMP_INC) # important for taking precedence over any (older) OpenSSL CMP headers
override CFLAGS += -isystem $(OPENSSL_DIR)/include # use of -isystem is critical for selecting wanted OpenSSL version
INCLUDE_OPENSSL_BACKPORT = -include $(LIBCMP_INC)/openssl/openssl_backport.h # used to force inclusion of standalone version

override LDFLAGS += -L $(OPENSSL_LIB) -L $(OPENSSL)
ifeq ($(DEB_TARGET_ARCH),) # not during Debian packaging
  override LDFLAGS += -Wl,-rpath,$(OPENSSL_RPATH_LIB)
  ifneq ($(OPENSSL_RPATH_LIB),$(OPENSSL_RPATH))
    override LDFLAGS += -Wl,-rpath,$(OPENSSL_RPATH)
  endif
endif
override LDLIBS  += -lcrypto

LIBCMP_INC_HDRS          = $(patsubst %,$(LIBCMP_INC)/openssl/%,$(LIBCMP_HDRS_))
LIBCMP_INC_HDRS_INTERNAL = $(patsubst %,$(LIBCMP_INC)/internal/%,$(LIBCMP_HDRS_INTERNAL_))
CMP_SRCS_ = cmp_asn.c cmp_ctx.c cmp_err.c cmp_http.c cmp_hdr.c cmp_msg.c cmp_protect.c cmp_client.c cmp_server.c cmp_status.c cmp_vfy.c cmp_util.c openssl_backport.c
CRMF_SRCS_ = crmf_asn.c crmf_err.c crmf_lib.c crmf_pbm.c
HTTP_SRCS_ = http_client.c http_err.c http_lib.c
LIBCMP_SRCS = $(patsubst %,crypto/crmf/%,$(CRMF_SRCS_)) \
    $(patsubst %,crypto/cmp/%,$(CMP_SRCS_)) \
    $(patsubst %,crypto/http/%,$(HTTP_SRCS_))

.phony: build clean clean_all

$(OUT_DIR):
	@mkdir -p $(OUT_DIR)
build: $(OUT_DIR) $(OUT_DIR)/$(OUTLIB)

$(OUT_DIR)/$(OUTLIBV): $(LIBCMP_INC_HDRS) $(LIBCMP_INC_HDRS_INTERNAL) $(LIBCMP_SRCS)
	$(CC) -DCMP_STANDALONE $(CFLAGS) $(INCLUDE_OPENSSL_BACKPORT) $(LIBCMP_SRCS) $(LDFLAGS) $(LDLIBS) -shared -o $@ -Wl,-$(SONAME)$(OUTLIBV)

$(OUT_DIR)/$(OUTLIB): $(OUT_DIR)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(OUT_DIR)/$(OUTLIB)

clean:
	rm -fr $(OUT_DIR)/$(OUTLIB_)*$(DLL)*
	rm -f *.3 *.3.gz

clean_all: clean clean_deb
	rm -fr Makefile CMakeCache.txt *.cmake CMakeFiles/
	rm -f install_manifest*.txt
	rm -f *.3{,.gz}

DEST_PRE=$(ROOTFS)/usr
DEST_LIB=$(DEST_PRE)/lib
DEST_INC=$(DEST_PRE)/include/cmp
DEST_MAN=$(DEST_PRE)/share/man/man3
LIBCMP_DOCS_ = $(wildcard doc/man3/*.pod)

.phony: install uninstall

install: # $(OUT_DIR)/$(OUTLIB).$(VERSION)
	install -D $(OUT_DIR)/$(OUTLIBV) $(DEST_LIB)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(DEST_LIB)/$(OUTLIB)
#install_headers:
	mkdir -p $(DEST_INC)/openssl
	install -D $(LIBCMP_INC)/openssl/*.h $(DEST_INC)/openssl
#install_doc:
	mkdir -p $(DEST_MAN)
	install -D $(LIBCMP_DOCS_) $(DEST_MAN)

uninstall:
	rm -f $(DEST_LIB)/$(OUTLIB_)*$(DLL)*
	rm -rf $(DEST_INC)/openssl
	rmdir 2>/dev/null $(DEST_INC) || true
	@ #rm -f $(LIBCMP_DOCS_install)
	rm -f $(DEST_MAN)/{OSSL_*{.pod,.gz},changelog.gz,copyright}
	rmdir 2>/dev/null $(DEST_MAN) || true

#SRCS=$(shell ls Makefile_cmp include/openssl/{{cmp,crmf,http}{,err}.h,safestack_backport.h} crypto/{cmp,crmf,http}/*.{c,h})
#SRCS_TAR=cmpossl_0.1.0.orig.tar.gz
.phony: deb clean_deb
deb:
	@ #tar czf $(SRCS_TAR) $(SRCS)
	debuild -e OPENSSL_DIR="$(OPENSSL_DIR)" -e OPENSSL_LIB="$(OPENSSL_LIB)" \
	  -uc -us --lintian-opts --profile debian # --fail-on none
	@ #rm $(SRCS_TAR)
# alternative:
#	LD_LIBRARY_PATH= dpkg-buildpackage -uc -us # may prepend DH_VERBOSE=1

clean_deb:
	rm -rf debian/{.debhelper,tmp,libcmp{,-dev}} debian-packaging
	rm -f debian/{files,debhelper-build-stamp} debian/*.{log,substvars}
	rm -f ../libcmp*.{deb,dsc,build*,changes,tar.gz}
	rm -fr _CPack_Packages changelog.gz
	rm -f libcmp*.{deb,tar.gz}
